grammar;

// ===== LEXER =====
use super::lexer::Token;
use super::lalrpop_lexer::LexicalError;

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "let" => Token::KeywordLet,
    "fn" => Token::KeywordFn,
    "if" => Token::KeywordIf,
    "then" => Token::KeywordThen,
    "else" => Token::KeywordElse,
    "identifier" => Token::Identifier(<String>),
    "int" => Token::Integer(<i64>),
    "bool" => Token::Boolean(<bool>),
    "string" => Token::String(<String>),
    "::" => Token::DoubleColon,
    ":" => Token::Colon,
    "->" => Token::Arrow,
    "=>" => Token::FatArrow,
    "@" => Token::At,
    "#" => Token::Hash,
    "$" => Token::Dollar,
    "!" => Token::OperatorNot,
    "." => Token::Dot,
    "," => Token::Comma,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "[" => Token::LBracket,
    "]" => Token::RBracket,
    "=" => Token::Assign,
    ";" => Token::Semicolon,
    "+" => Token::OperatorAdd,
    "-" => Token::OperatorSub,
    "*" => Token::OperatorMul,
    "/" => Token::OperatorDiv,
    "%" => Token::OperatorMod,
    "||" => Token::OperatorOr,
    "&&" => Token::OperatorAnd,
    "==" => Token::OperatorEqual,
    "!=" => Token::OperatorNotEqual,
    "<" => Token::OperatorLess,
    "<=" => Token::OperatorLessEqual,
    ">" => Token::OperatorGreater,
    ">=" => Token::OperatorGreaterEqual,
  }
}

// ===== PARSER =====
use super::ast::{Expr, Atom, Opcode};

// Define the main expressions with proper handling of optional elements and clear precedence
pub Expr: Expr = {
    <cond:IfExpr> => cond,
    <letExpr:LetExpr> => letExpr,
    <array:ArrayExpr> => array,
    <object:ObjectExpr> => object,
    <fnExpr:FnExpr> => fnExpr,
    <block:BlockExpr> => block,
    <assign:AssignExpr> => assign,
};

// If expression with and without else part
IfExpr: Expr = {
    "if" <cond:Expr> "then" <then_part:BlockExpr> "else" <else_part:BlockExpr> => {
        Expr::IfElse(Box::new(cond), Box::new(then_part), Some(Box::new(else_part)))
    },
    "if" <cond:Expr> "then" <then_part:BlockExpr> => {
        Expr::IfElse(Box::new(cond), Box::new(then_part), None)
    }
};

// Let expression with and without type annotation
LetExpr: Expr = {
    "let" <name:Ident> "=" <value:Expr> => {
        Expr::Let(name, Box::new(value))
    }
};

// Array expression
ArrayExpr: Expr = {
    "[" <elems:Comma<Expr>?> "]" => {
        Expr::Array(elems.unwrap_or(vec![]))
    }
};

// Object expression
ObjectExpr: Expr = {
    "#" "{" <elems:Comma<ObjectElem>?> "}" => {
        Expr::Object(elems.unwrap_or(vec![]))
    }
};
ObjectElem: (String, Expr) = {
    <key:Ident> ":" <value:Expr> => (key, value)
};

// Function expression
FnExpr: Expr = {
    "fn" "(" <param:Ident?> ")" <body:Expr> => {
        Expr::Lambda(param, Box::new(body))
    }
};

// Define a clearer list of expressions handling
Exprs: Vec<Expr> = {
    <head:Expr> <tail:(";" <Expr>)*> => {
        let mut exprs = vec![head];
        for expr in tail {
            exprs.push(expr);
        }
        exprs
    }
};

// Block of expressions (might be empty)
Block: Vec<Expr> = {
    "{" <exprs:Exprs?> "}" => exprs.unwrap_or(vec![])
};
BlockExpr: Expr = {
    <block:Block> => Expr::Block(block)
};

// ==== Precedence climbing ====
// Binary
BinaryTier<Op, NextTier>: Expr = {
    <left:BinaryTier<Op, NextTier>> <op:Op> <right:NextTier> => Expr::BinaryOp(Box::new(left), op, Box::new(right)),
    NextTier
};
AssignOp: Opcode = {
    "=" => Opcode::Assign
};
AssignExpr: Expr = BinaryTier<AssignOp, OrExpr>;
OrOp: Opcode = {
    "||" => Opcode::Or
};
OrExpr: Expr = BinaryTier<OrOp, AndExpr>;
AndOp: Opcode = {
    "&&" => Opcode::And
};
AndExpr: Expr = BinaryTier<AndOp, EqualityExpr>;
EqualityOp: Opcode = {
    "==" => Opcode::Equal,
    "!=" => Opcode::NotEqual,
    "<" => Opcode::Less,
    "<=" => Opcode::LessEqual,
    ">" => Opcode::Greater,
    ">=" => Opcode::GreaterEqual
};
EqualityExpr: Expr = BinaryTier<EqualityOp, AddSubExpr>;
AddSubOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub
};
AddSubExpr: Expr = BinaryTier<AddSubOp, MulDivExpr>;
MulDivOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "%" => Opcode::Mod
};
MulDivExpr: Expr = BinaryTier<MulDivOp, UnaryExpr>;

// Unary
UnaryExpr: Expr = {
    "-" <expr:UnaryExpr> => Expr::UnaryOp(Opcode::Neg, Box::new(expr)),
    "!" <expr:UnaryExpr> => Expr::UnaryOp(Opcode::Not, Box::new(expr)),
    <function:FunctionCallArrayIndexExpr> => function
};
FunctionCallArrayIndexExpr: Expr = {
    <callee:FunctionCallArrayIndexExpr> "(" <arg:Expr?> ")" => Expr::Call(Box::new(callee), arg.map(Box::new)),
    <callee:FunctionCallArrayIndexExpr> "[" <index:Expr> "]" => Expr::Index(Box::new(callee), Box::new(index)),
    <member:MemberAccessExpr> => member
};
MemberAccessExpr: Expr = {
    <callee:MemberAccessExpr> "." <member:Ident> => Expr::Member(Box::new(callee), member),
    <constant:ConstantExpr> => constant,
};
ConstantExpr: Expr = {
    <atom:Atom> => Expr::Constant(atom),
    "(" <expr:Expr> ")" => expr
};

// Define identifiers with a clear regex pattern
Ident: String = <name:"identifier"> => name.to_string();

// Define atoms ensuring that the patterns are distinct and non-overlapping
Atom: Atom = {
    <num:"int"> => Atom::Num(num),
    <boolean:"bool"> => Atom::Boolean(boolean),
    <identifier:Ident> => Atom::Identifier(identifier),
    <string:"string"> => Atom::String(string),
};

// Define a clearer comma-separated list handling
Comma<T>: Vec<T> = {
    <head:T> <tail:("," <T>)*> => {
        let mut elems = vec![head];
        for elem in tail {
            elems.push(elem);
        }
        elems
    }
};